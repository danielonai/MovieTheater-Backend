generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  username String
  email    String   @unique
  password String
  role     UserRole @default(USER)
  Booking  Booking?
}

model Movie {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  duration    String
  cover       String
  screenings  Screening[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deleted     Boolean     @default(false)
}

model Screening {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  date    DateTime
  movie   Movie    @relation(fields: [movieId], references: [id])
  movieId String   @unique @db.ObjectId
  seats   Seat[]
  Booking Booking?  

  @@unique([date])
}

model Seat {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  state       SeatState
  row         String
  column      String
  booking     Booking    @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId   String     @unique @db.ObjectId
  Screening   Screening? @relation(fields: [screeningId], references: [id], onDelete: Cascade)
  screeningId String?    @db.ObjectId
}

model Booking {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique @db.ObjectId
  screening   Screening @relation(fields: [screeningId], references: [id], onDelete: Cascade)
  screeningId String    @unique @db.ObjectId
  bookedAt    DateTime
  seats       Seat?
}

enum SeatState {
  AVAILABLE
  RESERVED
  OCCUPIED
}

enum UserRole {
  USER
  ADMIN
}
